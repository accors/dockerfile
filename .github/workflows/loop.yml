name: "构建Loop"
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: loop
      DOCKER_BUILDKIT: 1
      DOCKER_CLI_EXPERIMENTAL: enabled
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKERHUB_REPOSITORY: ${{ secrets.DOCKER_USERNAME }}/${IMAGE_NAME}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Buildx cache
        uses: actions/cache@v2
        id: buildx-cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx

      - name: Build
        run: |
          declare -a IMAGES

          echo "Build amd64"
          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --output "type=image,push=true" \
            --platform linux/amd64 \
            --build-arg "TARGET=x86_64-unknown-linux-musl" \
            --tag "${DOCKERHUB_REPOSITORY}:latest-amd64" \
            -f ${IMAGE_NAME}/Dockerfile \
            .                                                             
          IMAGES+=( "${DOCKERHUB_REPOSITORY}:latest-amd64" )

          echo "Build arm-v7"
          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --output "type=image,push=true" \
            --platform linux/arm/v7 \
            --build-arg "TARGET=armv7-unknown-linux-musleabihf" \
            --tag "${DOCKERHUB_REPOSITORY}:latest-arm-v7" \
            -f ${IMAGE_NAME}/Dockerfile \
            .
          IMAGES+=( "${DOCKERHUB_REPOSITORY}:latest-arm-v7" )

          echo "Build arm64-v8"
          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --output "type=image,push=true" \
            --platform linux/arm64/v8 \
            --build-arg "TARGET=aarch64-unknown-linux-musl" \
            --tag "${DOCKERHUB_REPOSITORY}:latest-arm64-v8" \
            -f ${IMAGE_NAME}/Dockerfile \
            .
          IMAGES+=( "${DOCKERHUB_REPOSITORY}:latest-arm64-v8" )

          echo "Create manifest lists"
          docker manifest create "${DOCKERHUB_REPOSITORY}:latest" "${IMAGES[@]}"
          docker manifest annotate "${DOCKERHUB_REPOSITORY}:latest" "${DOCKERHUB_REPOSITORY}:latest-arm-v7" --variant "v7"
          docker manifest annotate "${DOCKERHUB_REPOSITORY}:latest" "${DOCKERHUB_REPOSITORY}:latest-arm64-v8" --variant "v8"

          echo "Push manifest lists & delete local copies"
          docker manifest push --purge "${DOCKERHUB_REPOSITORY}:latest"
